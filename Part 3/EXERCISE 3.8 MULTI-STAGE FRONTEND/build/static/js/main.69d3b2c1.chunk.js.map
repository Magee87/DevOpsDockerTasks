{"version":3,"sources":["assets/toskalogo.svg","components/NavBar.js","components/ExercisesList/AmIRunning.js","util/pingpong.js","components/ExercisesList/ExerciseButton.js","components/ExercisesList/BackendConnection.js","components/ExercisesList/NginxSetup.js","components/ExercisesList/RedisSetup.js","components/ExercisesList/PostgresMessageList.js","components/ExercisesList/PostgresConnection.js","components/ExercisesList/Exercise.js","components/ExercisesList/index.js","App.js","index.js"],"names":["NavBar","className","src","toskalogo","style","height","alt","AmIRunning","secretMessage","window","atob","baseURL","process","REACT_APP_BACKEND_URL","axiosInstance","axios","create","ExerciseButton","onClick","exercise","success","Button","variant","minWidth","disabled","BackendConnection","useState","message","status","setStatus","updateSuccess","testConnection","a","get","data","Error","NginxSetup","location","origin","RedisSetup","PostgresConnection","messageBody","setMessageBody","messages","setMessages","getMessages","res","postMessage","post","body","Input","id","placeholder","value","onChange","event","target","List","map","ListItem","PostgresMessageList","Exercise","exerciseNumber","ExerciseComponent","ExerciseList","App","ExercisesList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69d3b2c1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/toskalogo.c0f35cf0.svg\";","import React from \"react\";\nimport toskalogo from \"../assets/toskalogo.svg\";\n\nconst NavBar = () => (\n  <div className=\"navbar\">\n    <img src={toskalogo} style={{ height: \"100%\" }} alt=\"toska\" />\n  </div>\n);\n\nexport default NavBar","import React from \"react\";\n\nconst AmIRunning = () => {\n  const secretMessage = window.atob(\n    \"Q29uZ3JhdHVsYXRpb25zISBZb3UgY29uZmlndXJlZCB5b3VyIHBvcnRzIGNvcnJlY3RseSE=\"\n  );\n  return <span>{secretMessage}</span>;\n};\n\nexport default AmIRunning;\n","import axios from 'axios'\n\nconst baseURL = process.env.REACT_APP_BACKEND_URL || '/api'\n\nexport const axiosInstance = axios.create({ baseURL })\n\n/**\n * This can be used to check that frontend has access to backend\n */\nexport const pingpong = () => axiosInstance.get(\"/ping\")\n\n/**\n * ?redis=true will check that redis is connected to backend\n */\nexport const pingpongRedis = () => axiosInstance.get(\"/ping?redis=true\")\n\n/**\n * ?postgres=true will check that postgres database is connected to backend\n */\nexport const pingpongPostgres = () => axiosInstance.get(\"/ping?postgres=true\")\n\n/**\n * Nginx exercise wants the backend to live in /api\n */\nexport const pingpongNginx = () => axios.get('/api/ping')\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport DoneIcon from \"@material-ui/icons/Done\";\n\nconst ExerciseButton = ({ onClick, exercise, success = false }) => (\n  <Button\n    data-exercise={exercise}\n    variant=\"contained\"\n    style={{ minWidth: \"14em\" }}\n    disabled={success}\n    onClick={onClick}\n  >\n    {success ? <DoneIcon data-ex-success={exercise} /> : \"Press to Test!\"}\n  </Button>\n);\n\nexport default ExerciseButton;\n","import React, { useState } from \"react\";\nimport { pingpong } from \"../../util/pingpong\";\nimport ExerciseButton from \"./ExerciseButton\";\n\nconst BackendConnection = () => {\n  const [status, setStatus] = useState({ message: \"\", success: false });\n\n  const updateSuccess = (message, success = false) => {\n    setStatus({ message, success });\n  };\n\n  const testConnection = async () => {\n    updateSuccess(\"\");\n    try {\n      const res = await pingpong();\n      if (res.data !== \"pong\") throw new Error(\"Response was not pong.\");\n\n      updateSuccess(\"Success! Great job!\", true);\n    } catch (err) {\n      updateSuccess(\"Not yet working. Check network tab for what is going on.\");\n    }\n  };\n\n  return (\n    <>\n      <ExerciseButton exercise=\"backend\" success={status.success} onClick={testConnection} />\n      <span className=\"exercise-status\">{status.message}</span>\n    </>\n  );\n};\n\nexport default BackendConnection;\n","import React, { useState } from \"react\";\nimport ExerciseButton from \"./ExerciseButton\";\nimport { pingpongNginx } from \"../../util/pingpong\";\n\nconst NginxSetup = () => {\n  const [status, setStatus] = useState({ message: \"\", success: false });\n\n  const updateSuccess = (message, success = false) => {\n    setStatus({ message, success });\n  };\n\n  const testConnection = async () => {\n    updateSuccess(\"\");\n    try {\n      const res = await pingpongNginx();\n      if (res.data !== \"pong\") throw new Error(\"Response was not pong.\");\n\n      updateSuccess(\"Nice! The exercise is complete!\", true);\n    } catch (err) {\n      updateSuccess(\n        `Something is wrong. It is not working correctly. Is pingpong available in ${window.location.origin}/api/ping?`\n      );\n    }\n  };\n\n  return (\n    <>\n      <ExerciseButton exercise=\"nginx\" success={status.success} onClick={testConnection} />\n      <span className=\"exercise-status\">{status.message}</span>\n    </>\n  );\n};\n\nexport default NginxSetup;\n","import React, { useState } from \"react\";\nimport ExerciseButton from \"./ExerciseButton\";\nimport { pingpongRedis } from \"../../util/pingpong\";\n\nconst RedisSetup = () => {\n  const [status, setStatus] = useState({ message: \"\", success: false });\n\n  const updateSuccess = (message, success = false) => {\n    setStatus({ message, success });\n  };\n\n  const testConnection = async () => {\n    updateSuccess(\"\");\n    try {\n      const res = await pingpongRedis();\n      if (res.data !== \"pong\") throw new Error(\"Response was not pong.\");\n\n      updateSuccess(\"Nice! The exercise is complete!\", true);\n    } catch (err) {\n      updateSuccess(\n        `Unable to get pong. Check API logs if there is a problem with redis connection! If that works check network tab.`\n      );\n    }\n  };\n\n  return (\n    <>\n      <ExerciseButton exercise=\"redis\" success={status.success} onClick={testConnection} />\n      <span className=\"exercise-status\">{status.message}</span>\n    </>\n  );\n};\n\nexport default RedisSetup;\n","import React, { useState } from \"react\";\nimport { Input, Button, List, ListItem } from '@material-ui/core';\nimport { axiosInstance } from \"../../util/pingpong\";\n\nconst PostgresConnection = () => {\n  const [messageBody, setMessageBody] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  const getMessages = async () => {\n    try {\n      const res = await axiosInstance.get(\"/messages\");\n      setMessages(res?.data?.messages ?? []);\n    } catch (e) {}\n  };\n\n  const postMessage = async () => {\n    try {\n      await axiosInstance.post(\"/messages\", { body: messageBody });\n      await getMessages();\n      setMessageBody(\"\");\n    } catch (e) {}\n  };\n\n  const handleMessageChange = (event) => setMessageBody(event.target.value);\n\n  return (\n    <>\n      <div>\n        <Input \n          variant=\"outlined\"\n          id=\"message\"\n          placeholder=\"Write message here\"\n          value={messageBody}\n          onChange={handleMessageChange}\n        />\n        <Button variant=\"outlined\" onClick={postMessage}>\n          Send message!\n        </Button>\n        <Button variant=\"outlined\" onClick={getMessages}>\n          Get all messages!\n        </Button>\n        <List>\n          {messages.map((message) => (\n            <ListItem key={message.id}>{message.body}</ListItem>\n          ))}\n        </List>\n      </div>\n    </>\n  );\n};\n\nexport default PostgresConnection;\n","import React, { useState } from \"react\";\nimport ExerciseButton from \"./ExerciseButton\";\nimport PostgresMessageList from \"./PostgresMessageList\";\n\nimport { pingpongPostgres } from \"../../util/pingpong\";\n\nconst PostgresConnection = () => {\n  const [status, setStatus] = useState({ message: \"\", success: false });\n\n  const updateSuccess = (message, success = false) => {\n    setStatus({ message, success });\n  };\n\n  const testConnection = async () => {\n    updateSuccess(\"\");\n    try {\n      const res = await pingpongPostgres();\n      if (res.data !== \"pong\") throw new Error(\"Response was not pong.\")\n\n      updateSuccess(\"Working! Messages below also work.\", true);\n    } catch (err) {\n      updateSuccess(\"Not yet working. Check network tab to see what is going on.\");\n    }\n  };\n\n  return (\n    <>\n      <ExerciseButton exercise=\"postgres\" success={status.success} onClick={testConnection} />\n      <span className=\"exercise-status\">{status.message}</span>\n      <PostgresMessageList />\n    </>\n  );\n};\n\nexport default PostgresConnection;\n","import React from \"react\";\n\nconst Exercise = ({ exerciseNumber, ExerciseComponent }) => (\n  <div>\n    <span> Exercise {exerciseNumber}: </span>\n    {ExerciseComponent}\n    <hr />\n  </div>\n);\n\nexport default Exercise;\n","import React from \"react\";\n\nimport AmIRunning from \"./AmIRunning\";\nimport BackendConnection from \"./BackendConnection\";\nimport NginxSetup from \"./NginxSetup\";\nimport RedisSetup from \"./RedisSetup\";\nimport PostgresConnection from \"./PostgresConnection\";\nimport Exercise from \"./Exercise\";\n\nconst ExerciseList = () => (\n  <div className=\"exercise-list\">\n    <h3>Part 1</h3>\n    <Exercise exerciseNumber=\"1.12\" ExerciseComponent={<AmIRunning />} />\n    <Exercise exerciseNumber=\"1.14\" ExerciseComponent={<BackendConnection />} />\n    <h3>Part 2</h3>\n    <Exercise exerciseNumber=\"2.4\" ExerciseComponent={<RedisSetup />} />\n    <Exercise exerciseNumber=\"2.6\" ExerciseComponent={<PostgresConnection />} />\n    <Exercise exerciseNumber=\"2.8\" ExerciseComponent={<NginxSetup />} />\n  </div>\n);\n\nexport default ExerciseList;\n","import React from 'react'\nimport NavBar from './components/NavBar'\nimport ExercisesList from './components/ExercisesList'\n\nconst App = () => (\n  <>\n    <NavBar />\n    <ExercisesList />\n  </>\n)\n\nexport default App","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./assets/custom.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}